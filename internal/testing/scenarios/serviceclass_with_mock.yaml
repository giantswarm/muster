name: "serviceclass-with-mock-dependencies"
category: "behavioral"
concept: "serviceclass"
tags: ["mock", "serviceclass", "dependencies"]
timeout: "5m"

pre_configuration:
  mcp_servers:
    - name: "storage-mock"
      config:
        tools:
          - name: "storage_volume_create"
            input_schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  required: true
                size:
                  type: "string"
                  default: "10Gi"
                storage_class:
                  type: "string"
                  default: "standard"
            responses:
              - response:
                  status: "created"
                  volume_id: "vol-{{ .name }}-{{ .storage_class }}"
                  name: "{{ .name }}"
                  size: "{{ .size }}"
                  storage_class: "{{ .storage_class }}"
                  state: "available"
                delay: "3s"

          - name: "storage_volume_delete"
            input_schema:
              type: "object"
              properties:
                volume_id:
                  type: "string"
                  required: true
            responses:
              - response:
                  status: "deleted"
                  volume_id: "{{ .volume_id }}"
                delay: "2s"

    - name: "network-mock"
      config:
        tools:
          - name: "network_create_service"
            input_schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  required: true
                port:
                  type: "integer"
                  required: true
                type:
                  type: "string"
                  default: "ClusterIP"
            responses:
              - response:
                  status: "created"
                  service_name: "{{ .name }}"
                  port: "{{ .port }}"
                  type: "{{ .type }}"
                  cluster_ip: "10.96.{{ .port }}.100"
                delay: "1s"

          - name: "network_delete_service"
            input_schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  required: true
            responses:
              - response:
                  status: "deleted"
                  service_name: "{{ .name }}"

  service_classes:
    - name: "web-application"
      config:
        name: "web-application"
        type: "stateful"
        version: "1.0.0"
        parameters:
          app_name:
            type: "string"
            required: true
          storage_size:
            type: "string"
            default: "10Gi"
          port:
            type: "integer"
            default: 8080

        serviceConfig:
          lifecycleTools:
            start:
              tool: "x_storage-mock_storage_volume_create"
              arguments:
                name: "{{ .app_name }}-storage"
                size: "{{ .storage_size }}"
            stop:
              tool: "x_storage-mock_storage_volume_delete"
              arguments:
                volume_id: "vol-{{ .app_name }}-storage-standard"

steps:
  - id: verify-mock-servers-available
    tool: "core_mcpserver_list"
    args: {}
    expected:
      success: true
      contains: ["storage-mock", "network-mock"]
    timeout: "30s"

  - id: verify-serviceclass-tools-available
    tool: "core_serviceclass_available"
    args:
      name: "web-application"
    expected:
      success: true
      json_path:
        available: true
    timeout: "30s"

  - id: create-web-app-service
    tool: "core_service_create"
    args:
      serviceClassName: "web-application"
      name: "test-web-app"
      parameters:
        app_name: "my-web-app"
        storage_size: "20Gi"
        port: 9000
    expected:
      success: true
      contains: ["test-web-app", "web-application"]
    timeout: "1m"

  - id: verify-service-created
    tool: "core_service_get"
    args:
      name: "test-web-app"
    expected:
      success: true
      contains: ["test-web-app", "my-web-app", "Running"]
    timeout: "30s"

  - id: test-storage-creation-directly
    tool: "x_storage-mock_storage_volume_create"
    args:
      name: "direct-test-volume"
      size: "5Gi"
      storage_class: "fast"
    expected:
      success: true
      contains: ["created", "vol-direct-test-volume-fast", "5Gi"]
    timeout: "30s"

  - id: test-network-service-creation-directly
    tool: "x_network-mock_network_create_service"
    args:
      name: "direct-test-service"
      port: 3000
      type: "LoadBalancer"
    expected:
      success: true
      contains: ["created", "direct-test-service", "3000", "LoadBalancer"]
    timeout: "30s"

  - id: test-service-lifecycle-stop
    tool: "core_service_stop"
    args:
      name: "test-web-app"
    expected:
      success: true
      contains: ["test-web-app"]
    timeout: "30s"

  - id: test-service-lifecycle-start
    tool: "core_service_start"
    args:
      name: "test-web-app"
    expected:
      success: true
      contains: ["test-web-app"]
    timeout: "30s"

cleanup:
  - id: delete-test-service
    tool: "core_service_delete"
    args:
      name: "test-web-app"
    expected:
      success: true
      contains: ["test-web-app"]
    timeout: "1m"

  - id: cleanup-direct-storage
    tool: "x_storage-mock_storage_volume_delete"
    args:
      volume_id: "vol-direct-test-volume-fast"
    expected:
      success: true
      contains: ["deleted", "vol-direct-test-volume-fast"]
    timeout: "30s"

  - id: cleanup-direct-network
    tool: "x_network-mock_network_delete_service"
    args:
      name: "direct-test-service"
    expected:
      success: true
      contains: ["deleted", "direct-test-service"]
    timeout: "30s"

  - id: cleanup-serviceclass
    tool: "core_serviceclass_delete"
    args:
      name: "web-application"
    expected:
      success: true
      contains: ["web-application"]
    timeout: "30s" 
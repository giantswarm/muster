name: "workflow-advanced-scenarios"
category: "behavioral"
concept: "workflow"
tags: ["workflow", "advanced", "core-api"]
timeout: "5m"

pre_configuration:
  workflows:
    - name: "store-and-use-workflow"
      config:
        name: "store-and-use-workflow"
        inputSchema:
          type: "object"
          properties: {}
          required: []
        steps:
          - id: "get_service_list"
            tool: "core_service_list"
            # The 'store' key saves the entire output of this step into the context
            # with the key 'all_services'
            store: "all_services"
          - id: "echo_service_list"
            tool: "x_mock-echo_echo"
            args:
              # We can then reference the stored output in subsequent steps
              text: "Stored services: {{ .results.all_services }}"
            store: "echo_result"

  mcp_servers:
    - name: "mock-echo"
      config:
        tools:
          - name: "echo"
            input_schema:
              type: "object"
              properties: { text: { type: "string" } }
            responses:
              - response: { echoed: "{{ .text }}" }

steps:
- id: "get-workflow-spec-full"
  tool: "core_workflow_get"
  args:
    name: "store-and-use-workflow"
  expected:
    success: true
    contains: ["name", "steps"]

- id: "get-workflow-spec-schema-only"
  tool: "core_workflow_get"
  args:
    name: "store-and-use-workflow"
  expected:
    success: true
    contains: ["name"]

- id: "get-workflow-spec-invalid-format"
  tool: "core_workflow_get"
  args:
    name: "non-existent-workflow"
  expected:
    success: false
    error_contains: ["not found"]

- id: "run-store-and-use-workflow"
  tool: "workflow_store-and-use-workflow"
  args: {}
  expected:
    success: true
    # We expect the final output to contain the echoed text, which includes
    # the stringified JSON from the first step's output.
    contains: ["Stored services", "services", "completed"]

- id: "create-workflow-with-no-steps"
  tool: "core_workflow_create"
  args:
    name: "empty-steps-workflow"
    inputSchema:
      type: "object"
      properties: {}
      required: []
    steps: []
  expected:
    success: false
    error_contains: ["must have at least one step"]

- id: "run-workflow-that-overwrites-context"
  tool: "core_workflow_create"
  args:
    name: "overwrite-context-workflow"
    inputSchema:
      type: "object"
      properties: {}
      required: []
    steps:
      - id: "step1"
        tool: "x_mock-echo_echo"
        args:
          text: "first"
        store: "my_value"
      - id: "step2"
        tool: "x_mock-echo_echo"
        args:
          text: "second"
        store: "my_value"
      - id: "step3"
        tool: "x_mock-echo_echo"
        args:
          text: "final value is {{ .context.my_value.echoed }}"
  expected:
    success: true
  cleanup:
  - tool: "core_workflow_delete"
    args: { name: "overwrite-context-workflow" }
- id: "run-overwrite-context-workflow"
  tool: "workflow_overwrite-context-workflow"
  args: {}
  expected:
    success: true
    json_path:
      echoed: "final value is second"

- id: "run-workflow-with-bad-template"
  tool: "core_workflow_create"
  args:
    name: "bad-template-workflow"
    inputSchema:
      type: "object"
      properties: {}
      required: []
    steps:
      - id: "bad-step"
        tool: "x_mock-echo_echo"
        args:
          text: "{{ .context.non_existent_value }}"
  expected:
    success: true # The workflow itself is valid
  cleanup:
  - tool: "core_workflow_delete"
    args: { name: "bad-template-workflow" }
- id: "run-bad-template-workflow"
  tool: "workflow_bad-template-workflow"
  args: {}
  expected:
    success: false
    error_contains: ["failed to render arguments", "non_existent_value"] 
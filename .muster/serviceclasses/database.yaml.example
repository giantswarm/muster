# Database Management ServiceClass Definition
# This example demonstrates a ServiceClass for database management operations
apiVersion: muster.giantswarm.io/v1alpha1
kind: ServiceClass
metadata:
  name: database-management
  namespace: default
spec:
  description: "Database management ServiceClass for PostgreSQL operations"
  args:
    database_name:
      type: "string"
      required: true
      description: "Name of the database"
    host:
      type: "string"
      required: false
      description: "Database host"
      default: "localhost"
    port:
      type: "integer"
      required: false
      description: "Database port"
      default: 5432
    username:
      type: "string"
      required: true
      description: "Database username"
    password:
      type: "string"
      required: false
      description: "Database password"
  serviceConfig:
    lifecycleTools:
      start:
        tool: "api_database_connect"
        args:
          database: "{{ .database_name }}"
          host: "{{ .host | default \"localhost\" }}"
          port: "{{ .port | default 5432 }}"
          username: "{{ .username }}"
          password: "{{ .password }}"
        outputs:
          serviceId: "connectionId"
          status: "status"
          database_name: "database"
          host: "host"
          port: "port"
      stop:
        tool: "api_database_disconnect"
        args:
          connectionId: "{{ .service_id }}"
        outputs:
          status: "status"
      healthCheck:
        tool: "api_database_ping"
        args:
          connectionId: "{{ .service_id }}"
        expect:
          success: true
          jsonPath:
            health: true
            connected: true
      status:
        tool: "api_database_status"
        args:
          connectionId: "{{ .service_id }}"
        outputs:
          active_connections: "activeConnections"
          database_size: "databaseSize"
          last_backup: "lastBackup"
    healthCheck:
      enabled: true
      interval: "60s"
      failureThreshold: 3
      successThreshold: 1
    timeout:
      create: "30s"
      delete: "15s"
      healthCheck: "10s"
    outputs:
      connectionId: "{{ .start.serviceId }}"
      status: "{{ .start.status }}"
      database_name: "{{ .start.database_name }}"
      host: "{{ .start.host }}"
      port: "{{ .start.port }}" 
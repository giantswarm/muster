apiVersion: muster.giantswarm.io/v1alpha1
kind: ServiceClass
metadata:
  name: complex-microservice
  namespace: default
spec:
  description: "Web application service with load balancer and health monitoring"
  args:
    app_name:
      type: string
      required: true
      description: "Name of the web application"
    port:
      type: integer
      required: false
      default: 8080
      description: "Application port"
    replicas:
      type: integer
      required: false
      default: 2
      description: "Number of application replicas"
    domain:
      type: string
      required: false
      default: "localhost"
      description: "Domain name for the application"
    enable_ssl:
      type: boolean
      required: false
      default: false
      description: "Enable SSL/TLS encryption"
  serviceConfig:
    defaultName: "{{.app_name}}-app"
    dependencies: ["postgres-database", "redis-cache"]
    lifecycleTools:
      start:
        tool: "k8s_deploy_app"
        args:
          name: "{{.app_name}}"
          image: "nginx:latest"
          port: "{{.port}}"
          replicas: "{{.replicas}}"
          domain: "{{.domain}}"
          ssl: "{{.enable_ssl}}"
        outputs:
          deployment_id: "result.deployment.id"
          service_url: "result.service.url"
      stop:
        tool: "k8s_delete_app"
        args:
          deployment_id: "{{.deployment_id}}"
      healthCheck:
        tool: "http_health_check"
        args:
          url: "{{.service_url}}/health"
          timeout: "30s"
        expect:
          success: true
          jsonPath:
            status: "healthy"
            ready: true
    healthCheck:
      enabled: true
      interval: "30s"
      failureThreshold: 3
      successThreshold: 1
      initialDelay: "60s"
    timeout:
      create: "10m"
      delete: "5m"
      healthCheck: "30s"
    scaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 10
      targetCPU: 70
    monitoring:
      enabled: true
      metrics:
        - name: "request_rate"
          path: "/metrics"
        - name: "error_rate"
          path: "/metrics"
    outputs:
      service_url: "{{.service_url}}"
      deployment_id: "{{.deployment_id}}"
      port: "{{.port}}" 
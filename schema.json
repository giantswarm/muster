{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Generated schema for muster core API tools for test scenario validation",
  "generated_at": "2025-07-11T16:27:17+02:00",
  "properties": {
    "tools": {
      "description": "Core API tools available in muster serve",
      "properties": {
        "core_config_get": {
          "description": "Arguments for core_config_get tool",
          "properties": {},
          "type": "object"
        },
        "core_config_get_aggregator": {
          "description": "Arguments for core_config_get_aggregator tool",
          "properties": {},
          "type": "object"
        },
        "core_config_reload": {
          "description": "Arguments for core_config_reload tool",
          "properties": {},
          "type": "object"
        },
        "core_config_save": {
          "description": "Arguments for core_config_save tool",
          "properties": {},
          "type": "object"
        },
        "core_config_update_aggregator": {
          "description": "Arguments for core_config_update_aggregator tool",
          "properties": {
            "aggregator": {
              "description": "Aggregator configuration",
              "type": "object"
            }
          },
          "required": [
            "aggregator"
          ],
          "type": "object"
        },
        "core_mcpserver_create": {
          "description": "Arguments for core_mcpserver_create tool",
          "properties": {
            "autoStart": {
              "description": "Whether server should auto-start",
              "type": "boolean"
            },
            "command": {
              "description": "Command and arguments (for localCommand type)",
              "items": {
                "description": "Command executable or argument",
                "type": "string"
              },
              "minItems": 1,
              "type": "array"
            },
            "description": {
              "description": "MCP server description",
              "type": "string"
            },
            "env": {
              "additionalProperties": {
                "description": "Environment variable value",
                "type": "string"
              },
              "description": "Environment variables",
              "type": "object"
            },
            "name": {
              "description": "MCP server name",
              "type": "string"
            },
            "type": {
              "description": "MCP server type (localCommand)",
              "type": "string"
            }
          },
          "required": [
            "name",
            "type"
          ],
          "type": "object"
        },
        "core_mcpserver_delete": {
          "description": "Arguments for core_mcpserver_delete tool",
          "properties": {
            "name": {
              "description": "Name of the MCP server to delete",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_mcpserver_get": {
          "description": "Arguments for core_mcpserver_get tool",
          "properties": {
            "name": {
              "description": "Name of the MCP server to retrieve",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_mcpserver_list": {
          "description": "Arguments for core_mcpserver_list tool",
          "properties": {},
          "type": "object"
        },
        "core_mcpserver_update": {
          "description": "Arguments for core_mcpserver_update tool",
          "properties": {
            "autoStart": {
              "description": "Whether server should auto-start",
              "type": "boolean"
            },
            "command": {
              "description": "Command and arguments (for localCommand type)",
              "items": {
                "description": "Command executable or argument",
                "type": "string"
              },
              "minItems": 1,
              "type": "array"
            },
            "description": {
              "description": "MCP server description",
              "type": "string"
            },
            "env": {
              "additionalProperties": {
                "description": "Environment variable value",
                "type": "string"
              },
              "description": "Environment variables",
              "type": "object"
            },
            "name": {
              "description": "MCP server name",
              "type": "string"
            },
            "type": {
              "description": "MCP server type (localCommand)",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_mcpserver_validate": {
          "description": "Arguments for core_mcpserver_validate tool",
          "properties": {
            "autoStart": {
              "description": "Whether server should auto-start",
              "type": "boolean"
            },
            "command": {
              "description": "Command and arguments (for localCommand type)",
              "items": {
                "description": "Command executable or argument",
                "type": "string"
              },
              "minItems": 1,
              "type": "array"
            },
            "description": {
              "description": "MCP server description",
              "type": "string"
            },
            "env": {
              "additionalProperties": {
                "description": "Environment variable value",
                "type": "string"
              },
              "description": "Environment variables",
              "type": "object"
            },
            "name": {
              "description": "MCP server name",
              "type": "string"
            },
            "type": {
              "description": "MCP server type (localCommand)",
              "type": "string"
            }
          },
          "required": [
            "name",
            "type"
          ],
          "type": "object"
        },
        "core_service_create": {
          "description": "Arguments for core_service_create tool",
          "properties": {
            "args": {
              "additionalProperties": {
                "description": "Argument value - type depends on ServiceClass argument definition"
              },
              "description": "Arguments for service creation",
              "type": "object"
            },
            "autoStart": {
              "description": "Whether this instance should be started automatically on system startup (only applies if persist is true)",
              "type": "boolean"
            },
            "name": {
              "description": "Unique name for the service instance",
              "type": "string"
            },
            "persist": {
              "description": "Whether to persist this service instance definition to YAML files for automatic recreation on startup",
              "type": "boolean"
            },
            "serviceClassName": {
              "description": "Name of the ServiceClass to instantiate",
              "type": "string"
            }
          },
          "required": [
            "serviceClassName",
            "name"
          ],
          "type": "object"
        },
        "core_service_delete": {
          "description": "Arguments for core_service_delete tool",
          "properties": {
            "name": {
              "description": "Name of the ServiceClass instance to delete",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_service_get": {
          "description": "Arguments for core_service_get tool",
          "properties": {
            "name": {
              "description": "Name of the service to get",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_service_list": {
          "description": "Arguments for core_service_list tool",
          "properties": {},
          "type": "object"
        },
        "core_service_restart": {
          "description": "Arguments for core_service_restart tool",
          "properties": {
            "name": {
              "description": "Service name to restart",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_service_start": {
          "description": "Arguments for core_service_start tool",
          "properties": {
            "name": {
              "description": "Service name to start",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_service_status": {
          "description": "Arguments for core_service_status tool",
          "properties": {
            "name": {
              "description": "Service name to get status for",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_service_stop": {
          "description": "Arguments for core_service_stop tool",
          "properties": {
            "name": {
              "description": "Service name to stop",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_service_validate": {
          "description": "Arguments for core_service_validate tool",
          "properties": {
            "args": {
              "additionalProperties": {
                "description": "Argument value - type depends on ServiceClass argument definition"
              },
              "description": "Arguments for service creation",
              "type": "object"
            },
            "autoStart": {
              "description": "Whether this instance should auto-start",
              "type": "boolean"
            },
            "description": {
              "description": "Service instance description",
              "type": "string"
            },
            "name": {
              "description": "Service instance name",
              "type": "string"
            },
            "serviceClassName": {
              "description": "Name of the ServiceClass to instantiate",
              "type": "string"
            }
          },
          "required": [
            "name",
            "serviceClassName"
          ],
          "type": "object"
        },
        "core_serviceclass_available": {
          "description": "Arguments for core_serviceclass_available tool",
          "properties": {
            "name": {
              "description": "Name of the ServiceClass to check",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_serviceclass_create": {
          "description": "Arguments for core_serviceclass_create tool",
          "properties": {
            "args": {
              "description": "ServiceClass arguments schema",
              "type": "object"
            },
            "description": {
              "description": "ServiceClass description",
              "type": "string"
            },
            "name": {
              "description": "ServiceClass name",
              "type": "string"
            },
            "serviceConfig": {
              "description": "ServiceClass service configuration",
              "type": "object"
            }
          },
          "required": [
            "name",
            "serviceConfig"
          ],
          "type": "object"
        },
        "core_serviceclass_delete": {
          "description": "Arguments for core_serviceclass_delete tool",
          "properties": {
            "name": {
              "description": "Name of the ServiceClass to delete",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_serviceclass_get": {
          "description": "Arguments for core_serviceclass_get tool",
          "properties": {
            "name": {
              "description": "Name of the ServiceClass to retrieve",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_serviceclass_list": {
          "description": "Arguments for core_serviceclass_list tool",
          "properties": {},
          "type": "object"
        },
        "core_serviceclass_update": {
          "description": "Arguments for core_serviceclass_update tool",
          "properties": {
            "args": {
              "description": "ServiceClass arguments schema",
              "type": "object"
            },
            "description": {
              "description": "ServiceClass description",
              "type": "string"
            },
            "name": {
              "description": "ServiceClass name",
              "type": "string"
            },
            "serviceConfig": {
              "description": "ServiceClass service configuration",
              "type": "object"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_serviceclass_validate": {
          "description": "Arguments for core_serviceclass_validate tool",
          "properties": {
            "args": {
              "description": "ServiceClass arguments schema",
              "type": "object"
            },
            "description": {
              "description": "ServiceClass description",
              "type": "string"
            },
            "name": {
              "description": "ServiceClass name",
              "type": "string"
            },
            "serviceConfig": {
              "description": "ServiceClass service configuration",
              "type": "object"
            }
          },
          "required": [
            "name",
            "serviceConfig"
          ],
          "type": "object"
        },
        "core_workflow_available": {
          "description": "Arguments for core_workflow_available tool",
          "properties": {
            "name": {
              "description": "Name of the workflow to check",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_workflow_create": {
          "description": "Arguments for core_workflow_create tool",
          "properties": {
            "args": {
              "description": "Simple argument definitions for workflow input validation",
              "type": "object"
            },
            "description": {
              "description": "Workflow description",
              "type": "string"
            },
            "name": {
              "description": "Workflow name",
              "type": "string"
            },
            "steps": {
              "description": "Array of workflow steps defining the execution sequence",
              "items": {
                "additionalProperties": false,
                "properties": {
                  "allow_failure": {
                    "description": "Whether this step is allowed to fail without failing the workflow. When true, step failures are recorded but workflow continues (optional, defaults to false)",
                    "type": "boolean"
                  },
                  "args": {
                    "description": "Arguments to pass to the tool (optional). Use template variables to pass workflow inputs: { \"param\": \"{{ .input.workflowParam }}\" }. Template variables: {{ .input.* }} for workflow inputs, {{ .results.* }} for previous step results.",
                    "type": "object"
                  },
                  "condition": {
                    "description": "Optional condition that determines whether this step should execute (optional)",
                    "properties": {
                      "args": {
                        "description": "Arguments to pass to the condition tool (optional). Use template variables: { \"param\": \"{{ .input.workflowParam }}\" }",
                        "type": "object"
                      },
                      "expect": {
                        "description": "Expected result for condition to be considered true (optional when expect_not is used)",
                        "properties": {
                          "json_path": {
                            "description": "Optional JSON path expressions that must match specific values in the condition tool's response (optional)",
                            "type": "object"
                          },
                          "success": {
                            "description": "Whether the condition tool should succeed (true) or fail (false) for the condition to be met (optional, defaults to false)",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "expect_not": {
                        "description": "Negated expected result for condition to be considered true (optional when expect is used)",
                        "properties": {
                          "json_path": {
                            "description": "Optional JSON path expressions that must NOT match specific values in the condition tool's response (optional)",
                            "type": "object"
                          },
                          "success": {
                            "description": "Whether the condition tool should NOT succeed (true) or NOT fail (false) for the condition to be met (optional, defaults to false)",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "from_step": {
                        "description": "Reference to a previous step ID to use its result for condition evaluation (optional when tool is used)",
                        "type": "string"
                      },
                      "tool": {
                        "description": "Name of the tool to use for condition evaluation (optional when from_step is used)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": {
                    "description": "Human-readable description of what this step does (optional)",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique identifier for this step within the workflow",
                    "type": "string"
                  },
                  "store": {
                    "description": "Variable name to store the step result for use in later steps (optional)",
                    "type": "string"
                  },
                  "tool": {
                    "description": "Name of the tool to execute for this step",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "tool"
                ],
                "type": "object"
              },
              "minItems": 1,
              "type": "array"
            }
          },
          "required": [
            "name",
            "steps"
          ],
          "type": "object"
        },
        "core_workflow_delete": {
          "description": "Arguments for core_workflow_delete tool",
          "properties": {
            "name": {
              "description": "Name of the workflow to delete",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_workflow_execution_get": {
          "description": "Arguments for core_workflow_execution_get tool",
          "properties": {
            "execution_id": {
              "description": "Unique identifier of the workflow execution",
              "type": "string"
            },
            "include_steps": {
              "default": true,
              "description": "Include detailed step results in the response (default: true)",
              "type": "boolean"
            },
            "step_id": {
              "description": "Get result for specific step only (optional)",
              "type": "string"
            }
          },
          "required": [
            "execution_id"
          ],
          "type": "object"
        },
        "core_workflow_execution_list": {
          "description": "Arguments for core_workflow_execution_list tool",
          "properties": {
            "limit": {
              "default": 50,
              "description": "Maximum number of executions to return (default: 50)",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            },
            "offset": {
              "default": 0,
              "description": "Number of executions to skip for pagination (default: 0)",
              "minimum": 0,
              "type": "integer"
            },
            "status": {
              "description": "Filter executions by status (optional)",
              "enum": [
                "inprogress",
                "completed",
                "failed"
              ],
              "type": "string"
            },
            "workflow_name": {
              "description": "Filter executions by workflow name (optional)",
              "type": "string"
            }
          },
          "type": "object"
        },
        "core_workflow_get": {
          "description": "Arguments for core_workflow_get tool",
          "properties": {
            "name": {
              "description": "Name of the workflow",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "core_workflow_list": {
          "description": "Arguments for core_workflow_list tool",
          "properties": {
            "include_system": {
              "default": true,
              "description": "Include system-defined workflows",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "core_workflow_update": {
          "description": "Arguments for core_workflow_update tool",
          "properties": {
            "args": {
              "description": "Simple argument definitions for workflow input validation",
              "type": "object"
            },
            "description": {
              "description": "Workflow description",
              "type": "string"
            },
            "name": {
              "description": "Name of the workflow to update",
              "type": "string"
            },
            "steps": {
              "description": "Array of workflow steps defining the execution sequence",
              "items": {
                "additionalProperties": false,
                "properties": {
                  "allow_failure": {
                    "description": "Whether this step is allowed to fail without failing the workflow. When true, step failures are recorded but workflow continues (optional, defaults to false)",
                    "type": "boolean"
                  },
                  "args": {
                    "description": "Arguments to pass to the tool (optional). Use template variables to pass workflow inputs: { \"param\": \"{{ .input.workflowParam }}\" }. Template variables: {{ .input.* }} for workflow inputs, {{ .results.* }} for previous step results.",
                    "type": "object"
                  },
                  "condition": {
                    "description": "Optional condition that determines whether this step should execute (optional)",
                    "properties": {
                      "args": {
                        "description": "Arguments to pass to the condition tool (optional). Use template variables: { \"param\": \"{{ .input.workflowParam }}\" }",
                        "type": "object"
                      },
                      "expect": {
                        "description": "Expected result for condition to be considered true (optional when expect_not is used)",
                        "properties": {
                          "json_path": {
                            "description": "Optional JSON path expressions that must match specific values in the condition tool's response (optional)",
                            "type": "object"
                          },
                          "success": {
                            "description": "Whether the condition tool should succeed (true) or fail (false) for the condition to be met (optional, defaults to false)",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "expect_not": {
                        "description": "Negated expected result for condition to be considered true (optional when expect is used)",
                        "properties": {
                          "json_path": {
                            "description": "Optional JSON path expressions that must NOT match specific values in the condition tool's response (optional)",
                            "type": "object"
                          },
                          "success": {
                            "description": "Whether the condition tool should NOT succeed (true) or NOT fail (false) for the condition to be met (optional, defaults to false)",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "from_step": {
                        "description": "Reference to a previous step ID to use its result for condition evaluation (optional when tool is used)",
                        "type": "string"
                      },
                      "tool": {
                        "description": "Name of the tool to use for condition evaluation (optional when from_step is used)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": {
                    "description": "Human-readable description of what this step does (optional)",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique identifier for this step within the workflow",
                    "type": "string"
                  },
                  "store": {
                    "description": "Variable name to store the step result for use in later steps (optional)",
                    "type": "string"
                  },
                  "tool": {
                    "description": "Name of the tool to execute for this step",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "tool"
                ],
                "type": "object"
              },
              "minItems": 1,
              "type": "array"
            }
          },
          "required": [
            "name",
            "steps"
          ],
          "type": "object"
        },
        "core_workflow_validate": {
          "description": "Arguments for core_workflow_validate tool",
          "properties": {
            "args": {
              "description": "Simple argument definitions for workflow input validation",
              "type": "object"
            },
            "description": {
              "description": "Workflow description",
              "type": "string"
            },
            "name": {
              "description": "Workflow name",
              "type": "string"
            },
            "steps": {
              "description": "Array of workflow steps defining the execution sequence",
              "items": {
                "additionalProperties": false,
                "properties": {
                  "allow_failure": {
                    "description": "Whether this step is allowed to fail without failing the workflow. When true, step failures are recorded but workflow continues (optional, defaults to false)",
                    "type": "boolean"
                  },
                  "args": {
                    "description": "Arguments to pass to the tool (optional). Use template variables to pass workflow inputs: { \"param\": \"{{ .input.workflowParam }}\" }. Template variables: {{ .input.* }} for workflow inputs, {{ .results.* }} for previous step results.",
                    "type": "object"
                  },
                  "condition": {
                    "description": "Optional condition that determines whether this step should execute (optional)",
                    "properties": {
                      "args": {
                        "description": "Arguments to pass to the condition tool (optional). Use template variables: { \"param\": \"{{ .input.workflowParam }}\" }",
                        "type": "object"
                      },
                      "expect": {
                        "description": "Expected result for condition to be considered true (optional when expect_not is used)",
                        "properties": {
                          "json_path": {
                            "description": "Optional JSON path expressions that must match specific values in the condition tool's response (optional)",
                            "type": "object"
                          },
                          "success": {
                            "description": "Whether the condition tool should succeed (true) or fail (false) for the condition to be met (optional, defaults to false)",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "expect_not": {
                        "description": "Negated expected result for condition to be considered true (optional when expect is used)",
                        "properties": {
                          "json_path": {
                            "description": "Optional JSON path expressions that must NOT match specific values in the condition tool's response (optional)",
                            "type": "object"
                          },
                          "success": {
                            "description": "Whether the condition tool should NOT succeed (true) or NOT fail (false) for the condition to be met (optional, defaults to false)",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "from_step": {
                        "description": "Reference to a previous step ID to use its result for condition evaluation (optional when tool is used)",
                        "type": "string"
                      },
                      "tool": {
                        "description": "Name of the tool to use for condition evaluation (optional when from_step is used)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": {
                    "description": "Human-readable description of what this step does (optional)",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique identifier for this step within the workflow",
                    "type": "string"
                  },
                  "store": {
                    "description": "Variable name to store the step result for use in later steps (optional)",
                    "type": "string"
                  },
                  "tool": {
                    "description": "Name of the tool to execute for this step",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "tool"
                ],
                "type": "object"
              },
              "minItems": 1,
              "type": "array"
            }
          },
          "required": [
            "name",
            "steps"
          ],
          "type": "object"
        }
      },
      "type": "object"
    }
  },
  "title": "muster Core API Schema",
  "type": "object",
  "version": "1.0.0"
}